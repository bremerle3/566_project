-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity PID_Controller is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    InitN : IN STD_LOGIC;
    coeff_0_V : IN STD_LOGIC_VECTOR (24 downto 0);
    coeff_1_V : IN STD_LOGIC_VECTOR (24 downto 0);
    coeff_2_V : IN STD_LOGIC_VECTOR (24 downto 0);
    coeff_3_V : IN STD_LOGIC_VECTOR (24 downto 0);
    coeff_4_V : IN STD_LOGIC_VECTOR (24 downto 0);
    coeff_5_V : IN STD_LOGIC_VECTOR (24 downto 0);
    din_0_V : IN STD_LOGIC_VECTOR (24 downto 0);
    din_1_V : IN STD_LOGIC_VECTOR (24 downto 0);
    dout_0_V : OUT STD_LOGIC_VECTOR (24 downto 0);
    dout_1_V : OUT STD_LOGIC_VECTOR (24 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of PID_Controller is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "PID_Controller,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.025625,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=306,HLS_SYN_LUT=638}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal prev_yi_V : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal prev_x2_V : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal prev_x1_V : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal prev_yd_V : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal OP2_V_fu_204_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal OP2_V_reg_392 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_154_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_5_reg_397 : STD_LOGIC_VECTOR (24 downto 0);
    signal pid_mult2_V_reg_403 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_65 : BOOLEAN;
    signal p_Val2_10_fu_277_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_10_reg_409 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_75 : BOOLEAN;
    signal pid_addsub2_V_fu_288_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal pid_addsub2_V_reg_414 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_352_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_reg_421 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_87 : BOOLEAN;
    signal tmp_9_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_fu_324_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal e_V_1_fu_190_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal dout_1_V_preg : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_116 : BOOLEAN;
    signal grp_fu_134_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal OP2_V_1_fu_267_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_134_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal OP1_V_fu_199_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal OP1_V_1_fu_209_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal OP1_V_2_fu_262_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal OP1_V_3_fu_331_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_134_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal pid_addsub_V_fu_164_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_6_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_V_fu_176_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_12_fu_230_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_238_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_fu_246_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal prev_yd_V_load_s_fu_254_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal prev_yd_V_load_s_fu_254_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_6_fu_246_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_7_fu_272_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_12_fu_230_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_283_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Val2_9_fu_238_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal yi_V_fu_314_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp1_fu_336_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal pid_addsub2_V_1_fu_341_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_4_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                if ((ap_const_logic_1 = ap_ce)) then 
                    ap_CS_fsm <= ap_NS_fsm;
                end if; 
            end if;
        end if;
    end process;


    -- dout_1_V_preg assign process. --
    dout_1_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dout_1_V_preg <= ap_const_lv25_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = ap_ce) and not((ap_start = ap_const_logic_0)))) then 
                    dout_1_V_preg <= e_V_1_fu_190_p3;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = ap_ce) and not((ap_start = ap_const_logic_0)))) then
                OP2_V_reg_392 <= OP2_V_fu_204_p1;
                p_Val2_5_reg_397 <= grp_fu_134_p2(39 downto 15);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then
                p_Val2_10_reg_409 <= p_Val2_10_fu_277_p2;
                pid_addsub2_V_reg_414 <= pid_addsub2_V_fu_288_p2;
                prev_x1_V <= p_Val2_5_reg_397;
                prev_x2_V <= pid_mult2_V_reg_403;
                prev_yd_V <= p_Val2_10_fu_277_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1))) then
                pid_mult2_V_reg_403 <= grp_fu_134_p2(39 downto 15);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then
                prev_yi_V <= p_Val2_15_fu_324_p3;
                tmp_9_reg_426 <= tmp_9_fu_359_p2;
                tmp_V_reg_421 <= tmp_V_fu_352_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_ce)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (((ap_const_logic_1 = ap_ce) and not((ap_start = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
        OP1_V_1_fu_209_p1 <= std_logic_vector(resize(signed(coeff_0_V),50));

        OP1_V_2_fu_262_p1 <= std_logic_vector(resize(signed(coeff_2_V),50));

        OP1_V_3_fu_331_p1 <= std_logic_vector(resize(signed(coeff_3_V),50));

        OP1_V_fu_199_p1 <= std_logic_vector(resize(signed(coeff_1_V),50));

        OP2_V_1_fu_267_p1 <= std_logic_vector(resize(signed(prev_yd_V_load_s_fu_254_p3),50));

        OP2_V_fu_204_p1 <= std_logic_vector(resize(signed(e_V_1_fu_190_p3),50));


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_ce, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_ce, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_116 assign process. --
    ap_sig_bdd_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_116 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_65 assign process. --
    ap_sig_bdd_65_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_65 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_75 assign process. --
    ap_sig_bdd_75_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_75 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_87 assign process. --
    ap_sig_bdd_87_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_87 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_65)
    begin
        if (ap_sig_bdd_65) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_75)
    begin
        if (ap_sig_bdd_75) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_87)
    begin
        if (ap_sig_bdd_87) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_116)
    begin
        if (ap_sig_bdd_116) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    dout_0_V <= 
        coeff_5_V when (tmp_9_reg_426(0) = '1') else 
        tmp_V_reg_421;

    -- dout_1_V assign process. --
    dout_1_V_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_ce, e_V_1_fu_190_p3, dout_1_V_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_logic_1 = ap_ce) and not((ap_start = ap_const_logic_0)))) then 
            dout_1_V <= e_V_1_fu_190_p3;
        else 
            dout_1_V <= dout_1_V_preg;
        end if; 
    end process;

    e_V_1_fu_190_p3 <= 
        coeff_5_V when (tmp_7_fu_184_p2(0) = '1') else 
        e_V_fu_176_p3;
    e_V_fu_176_p3 <= 
        coeff_4_V when (tmp_6_fu_170_p2(0) = '1') else 
        pid_addsub_V_fu_164_p2;

    -- grp_fu_134_p0 assign process. --
    grp_fu_134_p0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, OP2_V_fu_204_p1, OP2_V_reg_392, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, OP2_V_1_fu_267_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_fu_134_p0 <= OP2_V_1_fu_267_p1(25 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            grp_fu_134_p0 <= OP2_V_reg_392(25 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_134_p0 <= OP2_V_fu_204_p1(25 - 1 downto 0);
        else 
            grp_fu_134_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_134_p1 assign process. --
    grp_fu_134_p1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, OP1_V_fu_199_p1, OP1_V_1_fu_209_p1, OP1_V_2_fu_262_p1, OP1_V_3_fu_331_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_fu_134_p1 <= OP1_V_3_fu_331_p1(25 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_fu_134_p1 <= OP1_V_2_fu_262_p1(25 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_134_p1 <= OP1_V_1_fu_209_p1(25 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_134_p1 <= OP1_V_fu_199_p1(25 - 1 downto 0);
        else 
            grp_fu_134_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_134_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(grp_fu_134_p0) * signed(grp_fu_134_p1))), 50));
    grp_fu_154_p4 <= grp_fu_134_p2(39 downto 15);
    p_Val2_10_fu_277_p2 <= std_logic_vector(unsigned(p_Val2_7_fu_272_p2) - unsigned(grp_fu_154_p4));
    p_Val2_12_fu_230_p0 <= (0=>InitN, others=>'-');
    p_Val2_12_fu_230_p3 <= 
        prev_yi_V when (p_Val2_12_fu_230_p0(0) = '1') else 
        ap_const_lv25_0;
    p_Val2_15_fu_324_p3 <= 
        coeff_5_V when (tmp_2_fu_320_p2(0) = '1') else 
        yi_V_fu_314_p3;
    p_Val2_6_fu_246_p0 <= (0=>InitN, others=>'-');
    p_Val2_6_fu_246_p3 <= 
        prev_x1_V when (p_Val2_6_fu_246_p0(0) = '1') else 
        ap_const_lv25_0;
    p_Val2_7_fu_272_p2 <= std_logic_vector(unsigned(p_Val2_5_reg_397) - unsigned(p_Val2_6_fu_246_p3));
    p_Val2_9_fu_238_p0 <= (0=>InitN, others=>'-');
    p_Val2_9_fu_238_p3 <= 
        prev_x2_V when (p_Val2_9_fu_238_p0(0) = '1') else 
        ap_const_lv25_0;
    pid_addsub2_V_1_fu_341_p2 <= std_logic_vector(unsigned(tmp1_fu_336_p2) + unsigned(p_Val2_15_fu_324_p3));
    pid_addsub2_V_fu_288_p2 <= std_logic_vector(unsigned(tmp_fu_283_p2) + unsigned(p_Val2_9_fu_238_p3));
    pid_addsub_V_fu_164_p2 <= std_logic_vector(unsigned(din_0_V) - unsigned(din_1_V));
    prev_yd_V_load_s_fu_254_p0 <= (0=>InitN, others=>'-');
    prev_yd_V_load_s_fu_254_p3 <= 
        prev_yd_V when (prev_yd_V_load_s_fu_254_p0(0) = '1') else 
        ap_const_lv25_0;
    tmp1_fu_336_p2 <= std_logic_vector(unsigned(p_Val2_10_reg_409) + unsigned(grp_fu_154_p4));
    tmp_1_fu_310_p2 <= "1" when (signed(pid_addsub2_V_reg_414) > signed(coeff_4_V)) else "0";
    tmp_2_fu_320_p2 <= "1" when (signed(pid_addsub2_V_reg_414) < signed(coeff_5_V)) else "0";
    tmp_4_fu_347_p2 <= "1" when (signed(pid_addsub2_V_1_fu_341_p2) > signed(coeff_4_V)) else "0";
    tmp_6_fu_170_p2 <= "1" when (signed(pid_addsub_V_fu_164_p2) > signed(coeff_4_V)) else "0";
    tmp_7_fu_184_p2 <= "1" when (signed(pid_addsub_V_fu_164_p2) < signed(coeff_5_V)) else "0";
    tmp_9_fu_359_p2 <= "1" when (signed(pid_addsub2_V_1_fu_341_p2) < signed(coeff_5_V)) else "0";
    tmp_V_fu_352_p3 <= 
        coeff_4_V when (tmp_4_fu_347_p2(0) = '1') else 
        pid_addsub2_V_1_fu_341_p2;
    tmp_fu_283_p2 <= std_logic_vector(unsigned(pid_mult2_V_reg_403) + unsigned(p_Val2_12_fu_230_p3));
    yi_V_fu_314_p3 <= 
        coeff_4_V when (tmp_1_fu_310_p2(0) = '1') else 
        pid_addsub2_V_reg_414;
end behav;
