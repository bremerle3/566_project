// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================


#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;
#define  int1 char
#define  int32 int




   #define AUTOTB_TVIN_duty  "../tv/cdatafile/c.gen_pwm.autotvin_duty.dat"
   #define AUTOTB_TVIN_freq  "../tv/cdatafile/c.gen_pwm.autotvin_freq.dat"
   #define AUTOTB_TVOUT_out_r  "../tv/cdatafile/c.gen_pwm.autotvout_out_r.dat"
   #define INTER_TCL  "../tv/cdatafile/ref.tcl"

   #define AUTOTB_TVOUT_PC_out_r  "../tv/rtldatafile/rtl.gen_pwm.autotvout_out_r.dat"

class INTER_TCL_FILE {
    public:
//functions
        INTER_TCL_FILE(const char* name) {
            mName = name;
            duty_depth = 0;
            freq_depth = 0;
            out_r_depth = 0;
            trans_num =0;
        }
        ~INTER_TCL_FILE() {
            mFile.open(mName);
            if (!mFile.good() ) {
                cout<<"Failed to open file ref.tcl."<<endl;
                exit (1);
            }
            string total_list = get_depth_list();
            mFile<<"set depth_list {\n";
            mFile<<total_list; 
            mFile<<"}\n";
            mFile<<"set trans_num "<<trans_num<<endl;
            mFile.close();
        }
        string get_depth_list () {
            stringstream total_list;
            total_list<<"   {duty "<< duty_depth << "}\n";
            total_list<<"   {freq "<< freq_depth << "}\n";
            total_list<<"   {out_r "<< out_r_depth << "}\n";
            return total_list.str();
        }
        void set_num (int num , int* class_num) {
            (*class_num) = (*class_num) > num ? (*class_num) : num;
        }
    public:
//variables
        int duty_depth;
        int freq_depth;
        int out_r_depth;
        int trans_num;
    private:
        ofstream mFile;
        const char* mName;
};

extern "C" void gen_pwm (int32 duty, int32 freq, int1* out);
#define gen_pwm AESL_ORIG_DUT_gen_pwm
extern "C" void gen_pwm (int32 duty, int32 freq, int1* out);
#undef gen_pwm
void gen_pwm (int32 duty, int32 freq, int1* out) {

    fstream wrapc_switch_file_token;

    wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");

    int AESL_i;

    if (wrapc_switch_file_token.good()) {

        static unsigned AESL_transaction_pc;

        string AESL_token;

        string AESL_num;

        static AESL_FILE_HANDLER aesl_fh;

        aesl_fh.read(AUTOTB_TVOUT_PC_out_r, AESL_token); //[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_out_r, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(AUTOTB_TVOUT_PC_out_r, AESL_token); //data

            sc_bv<1> *out_r_pc_buffer = new sc_bv<1>[1];

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'out_r', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'out_r', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    out_r_pc_buffer[i] = AESL_token.c_str();

                    i++;

                }

                aesl_fh.read(AUTOTB_TVOUT_PC_out_r, AESL_token); //data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out_r)) {

                   exit(1);

                }

            }

            if (i > 0) {

                sc_lv<1> *out_lv0_0_0_1 = new sc_lv<1>[1];

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

                    if(&(out[0]) != 0) {

                       out_lv0_0_0_1[0 + AESL_i].range(0, 0) = sc_bv<1>(out_r_pc_buffer[0 + AESL_i].range(0, 0));

                    }

                    AESL_i++;

                }

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

                    if(&(out[0]) != 0) {

                       out[i_0] = (out_lv0_0_0_1[0 + AESL_i]).to_uint64();

                    }

                    AESL_i++;

                }

                }

            delete [] out_r_pc_buffer;

        }

        AESL_transaction_pc ++ ;

    } else {

        static unsigned AESL_transaction;

        static AESL_FILE_HANDLER aesl_fh;

        char* tvin_duty = new char[50];

        char* tvin_freq = new char[50];

        char* tvout_out_r = new char[50];

        static INTER_TCL_FILE tcl_file(INTER_TCL);


        int leading_zero;

        sprintf(tvin_duty, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_duty, tvin_duty);

        sc_bv<32> duty_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        sc_lv<32> duty_tmp_mem; 

        if(&(duty) != 0) {

        duty_tmp_mem = duty;

           duty_tvin_wrapc_buffer.range(31, 0) = duty_tmp_mem.range(31, 0 ) ;

        }

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_duty, "%s\n", (duty_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_duty, tvin_duty);

        }

        tcl_file.set_num(1,&tcl_file.duty_depth);

        sprintf(tvin_duty, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_duty, tvin_duty);

        sprintf(tvin_freq, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_freq, tvin_freq);

        sc_bv<32> freq_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        sc_lv<32> freq_tmp_mem; 

        if(&(freq) != 0) {

        freq_tmp_mem = freq;

           freq_tvin_wrapc_buffer.range(31, 0) = freq_tmp_mem.range(31, 0 ) ;

        }

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_freq, "%s\n", (freq_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_freq, tvin_freq);

        }

        tcl_file.set_num(1,&tcl_file.freq_depth);

        sprintf(tvin_freq, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_freq, tvin_freq);

        AESL_ORIG_DUT_gen_pwm(duty,freq,out);

        sprintf(tvout_out_r, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVOUT_out_r, tvout_out_r);

        sc_bv<1> *out_r_tvout_wrapc_buffer = new sc_bv<1>[1];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

        sc_lv<1> out_tmp_mem; 

            if(&(out[0]) != 0) {

            out_tmp_mem = out[i_0];

               out_r_tvout_wrapc_buffer[0 + AESL_i].range(0, 0) = out_tmp_mem.range(0, 0 ) ;

            }

            AESL_i++;

        }

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvout_out_r, "%s\n", (out_r_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVOUT_out_r, tvout_out_r);

        }

        tcl_file.set_num(1,&tcl_file.out_r_depth);

        sprintf(tvout_out_r, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVOUT_out_r, tvout_out_r);

        delete [] out_r_tvout_wrapc_buffer;

        delete [] tvin_duty;

        delete [] tvin_freq;

        delete [] tvout_out_r;

        AESL_transaction++;

        tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

    }
}

#undef int1
#undef int32

