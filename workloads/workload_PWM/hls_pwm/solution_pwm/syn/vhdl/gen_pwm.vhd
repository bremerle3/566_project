-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gen_pwm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    duty : IN STD_LOGIC_VECTOR (31 downto 0);
    freq : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ap_vld : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC );
end;


architecture behav of gen_pwm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gen_pwm,hls_ip_2014_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.518000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=33,HLS_SYN_LUT=145}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_18 : BOOLEAN;
    signal i_1_fu_74_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_47 : BOOLEAN;
    signal i_reg_53 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_69_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_fu_65_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_bdd_36 : BOOLEAN;
    signal ap_sig_bdd_91 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                if ((ap_const_logic_1 = ap_ce)) then 
                    ap_CS_fsm <= ap_NS_fsm;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_53 assign process. --
    i_reg_53_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (ap_sig_bdd_91) then 
                    i_reg_53 <= i_1_fu_74_p2;
                elsif (ap_sig_bdd_36) then 
                    i_reg_53 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_ce, tmp_fu_69_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (((ap_const_logic_1 = ap_ce) and not((ap_start = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((ap_const_logic_1 = ap_ce) and (tmp_fu_69_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_ce, ap_sig_cseq_ST_st2_fsm_1, tmp_fu_69_p2)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_69_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_ce, ap_sig_cseq_ST_st2_fsm_1, tmp_fu_69_p2)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_69_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_18 assign process. --
    ap_sig_bdd_18_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_18 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_36 assign process. --
    ap_sig_bdd_36_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
                ap_sig_bdd_36 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_47 assign process. --
    ap_sig_bdd_47_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_47 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_91 assign process. --
    ap_sig_bdd_91_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_fu_69_p2)
    begin
                ap_sig_bdd_91 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_69_p2 = ap_const_lv1_0)));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_18)
    begin
        if (ap_sig_bdd_18) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_47)
    begin
        if (ap_sig_bdd_47) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_74_p2 <= std_logic_vector(unsigned(i_reg_53) + unsigned(ap_const_lv31_1));
    i_cast_fu_65_p1 <= std_logic_vector(resize(unsigned(i_reg_53),32));
    out_r <= std_logic_vector(resize(unsigned(tmp_1_fu_80_p2),8));

    -- out_r_ap_vld assign process. --
    out_r_ap_vld_assign_proc : process(ap_ce, ap_sig_cseq_ST_st2_fsm_1, tmp_fu_69_p2)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_69_p2 = ap_const_lv1_0)))) then 
            out_r_ap_vld <= ap_const_logic_1;
        else 
            out_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_80_p2 <= "1" when (signed(i_cast_fu_65_p1) < signed(duty)) else "0";
    tmp_fu_69_p2 <= "1" when (signed(i_cast_fu_65_p1) < signed(freq)) else "0";
end behav;
