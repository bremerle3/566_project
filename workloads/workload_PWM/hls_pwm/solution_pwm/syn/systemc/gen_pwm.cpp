// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "gen_pwm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic gen_pwm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic gen_pwm::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> gen_pwm::ap_ST_st1_fsm_0 = "1";
const sc_lv<2> gen_pwm::ap_ST_st2_fsm_1 = "10";
const sc_lv<32> gen_pwm::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> gen_pwm::ap_const_lv1_1 = "1";
const sc_lv<32> gen_pwm::ap_const_lv32_1 = "1";
const sc_lv<31> gen_pwm::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<1> gen_pwm::ap_const_lv1_0 = "0";
const sc_lv<31> gen_pwm::ap_const_lv31_1 = "1";

gen_pwm::gen_pwm(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_69_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_69_p2 );

    SC_METHOD(thread_ap_sig_bdd_18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_36);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_sig_bdd_47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_91);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_69_p2 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_18 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_47 );

    SC_METHOD(thread_i_1_fu_74_p2);
    sensitive << ( i_reg_53 );

    SC_METHOD(thread_i_cast_fu_65_p1);
    sensitive << ( i_reg_53 );

    SC_METHOD(thread_out_r);
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_69_p2 );
    sensitive << ( tmp_1_fu_80_p2 );

    SC_METHOD(thread_out_r_ap_vld);
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_69_p2 );

    SC_METHOD(thread_tmp_1_fu_80_p2);
    sensitive << ( duty );
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_69_p2 );
    sensitive << ( i_cast_fu_65_p1 );

    SC_METHOD(thread_tmp_fu_69_p2);
    sensitive << ( freq );
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_cast_fu_65_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_ce );
    sensitive << ( tmp_fu_69_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "gen_pwm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, duty, "(port)duty");
    sc_trace(mVcdFile, freq, "(port)freq");
    sc_trace(mVcdFile, out_r, "(port)out_r");
    sc_trace(mVcdFile, out_r_ap_vld, "(port)out_r_ap_vld");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_18, "ap_sig_bdd_18");
    sc_trace(mVcdFile, i_1_fu_74_p2, "i_1_fu_74_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_47, "ap_sig_bdd_47");
    sc_trace(mVcdFile, i_reg_53, "i_reg_53");
    sc_trace(mVcdFile, tmp_fu_69_p2, "tmp_fu_69_p2");
    sc_trace(mVcdFile, i_cast_fu_65_p1, "i_cast_fu_65_p1");
    sc_trace(mVcdFile, tmp_1_fu_80_p2, "tmp_1_fu_80_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_bdd_36, "ap_sig_bdd_36");
    sc_trace(mVcdFile, ap_sig_bdd_91, "ap_sig_bdd_91");
#endif

    }
    mHdltvinHandle.open("gen_pwm.hdltvin.dat");
    mHdltvoutHandle.open("gen_pwm.hdltvout.dat");
}

gen_pwm::~gen_pwm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void gen_pwm::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
            ap_CS_fsm = ap_NS_fsm.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
        if (ap_sig_bdd_91.read()) {
            i_reg_53 = i_1_fu_74_p2.read();
        } else if (ap_sig_bdd_36.read()) {
            i_reg_53 = ap_const_lv31_0;
        }
    }
}

void gen_pwm::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void gen_pwm::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void gen_pwm::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void gen_pwm::thread_ap_sig_bdd_18() {
    ap_sig_bdd_18 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void gen_pwm::thread_ap_sig_bdd_36() {
    ap_sig_bdd_36 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0));
}

void gen_pwm::thread_ap_sig_bdd_47() {
    ap_sig_bdd_47 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void gen_pwm::thread_ap_sig_bdd_91() {
    ap_sig_bdd_91 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_0));
}

void gen_pwm::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_18.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void gen_pwm::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_47.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void gen_pwm::thread_i_1_fu_74_p2() {
    i_1_fu_74_p2 = (!i_reg_53.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_reg_53.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void gen_pwm::thread_i_cast_fu_65_p1() {
    i_cast_fu_65_p1 = esl_zext<32,31>(i_reg_53.read());
}

void gen_pwm::thread_out_r() {
    out_r = esl_zext<8,1>(tmp_1_fu_80_p2.read());
}

void gen_pwm::thread_out_r_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_0))) {
        out_r_ap_vld = ap_const_logic_1;
    } else {
        out_r_ap_vld = ap_const_logic_0;
    }
}

void gen_pwm::thread_tmp_1_fu_80_p2() {
    tmp_1_fu_80_p2 = (!i_cast_fu_65_p1.read().is_01() || !duty.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_fu_65_p1.read()) < sc_bigint<32>(duty.read()));
}

void gen_pwm::thread_tmp_fu_69_p2() {
    tmp_fu_69_p2 = (!i_cast_fu_65_p1.read().is_01() || !freq.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_fu_65_p1.read()) < sc_bigint<32>(freq.read()));
}

void gen_pwm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && esl_seteq<1,1,1>(tmp_fu_69_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void gen_pwm::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"duty\" :  \"" << duty.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"freq\" :  \"" << freq.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r\" :  \"" << out_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ap_vld\" :  \"" << out_r_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_ce\" :  \"" << ap_ce.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

