// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "PID_Controller.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic PID_Controller::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic PID_Controller::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> PID_Controller::ap_ST_st1_fsm_0 = "1";
const sc_lv<5> PID_Controller::ap_ST_st2_fsm_1 = "10";
const sc_lv<5> PID_Controller::ap_ST_st3_fsm_2 = "100";
const sc_lv<5> PID_Controller::ap_ST_st4_fsm_3 = "1000";
const sc_lv<5> PID_Controller::ap_ST_st5_fsm_4 = "10000";
const sc_lv<32> PID_Controller::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> PID_Controller::ap_const_lv1_1 = "1";
const sc_lv<25> PID_Controller::ap_const_lv25_0 = "0000000000000000000000000";
const sc_lv<32> PID_Controller::ap_const_lv32_1 = "1";
const sc_lv<32> PID_Controller::ap_const_lv32_2 = "10";
const sc_lv<32> PID_Controller::ap_const_lv32_3 = "11";
const sc_lv<32> PID_Controller::ap_const_lv32_4 = "100";
const sc_lv<32> PID_Controller::ap_const_lv32_F = "1111";
const sc_lv<32> PID_Controller::ap_const_lv32_27 = "100111";

PID_Controller::PID_Controller(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_OP1_V_1_fu_209_p1);
    sensitive << ( coeff_0_V );

    SC_METHOD(thread_OP1_V_2_fu_262_p1);
    sensitive << ( coeff_2_V );

    SC_METHOD(thread_OP1_V_3_fu_331_p1);
    sensitive << ( coeff_3_V );

    SC_METHOD(thread_OP1_V_fu_199_p1);
    sensitive << ( coeff_1_V );

    SC_METHOD(thread_OP2_V_1_fu_267_p1);
    sensitive << ( prev_yd_V_load_s_fu_254_p3 );

    SC_METHOD(thread_OP2_V_fu_204_p1);
    sensitive << ( e_V_1_fu_190_p3 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_ap_sig_bdd_116);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_65);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_75);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_87);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_21 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_65 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_75 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_bdd_87 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_bdd_116 );

    SC_METHOD(thread_dout_0_V);
    sensitive << ( coeff_5_V );
    sensitive << ( ap_ce );
    sensitive << ( tmp_V_reg_421 );
    sensitive << ( tmp_9_reg_426 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_dout_1_V);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_ce );
    sensitive << ( e_V_1_fu_190_p3 );
    sensitive << ( dout_1_V_preg );

    SC_METHOD(thread_e_V_1_fu_190_p3);
    sensitive << ( coeff_5_V );
    sensitive << ( tmp_7_fu_184_p2 );
    sensitive << ( e_V_fu_176_p3 );

    SC_METHOD(thread_e_V_fu_176_p3);
    sensitive << ( coeff_4_V );
    sensitive << ( pid_addsub_V_fu_164_p2 );
    sensitive << ( tmp_6_fu_170_p2 );

    SC_METHOD(thread_grp_fu_134_p0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( OP2_V_fu_204_p1 );
    sensitive << ( OP2_V_reg_392 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( OP2_V_1_fu_267_p1 );

    SC_METHOD(thread_grp_fu_134_p1);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( OP1_V_fu_199_p1 );
    sensitive << ( OP1_V_1_fu_209_p1 );
    sensitive << ( OP1_V_2_fu_262_p1 );
    sensitive << ( OP1_V_3_fu_331_p1 );

    SC_METHOD(thread_grp_fu_134_p2);
    sensitive << ( grp_fu_134_p0 );
    sensitive << ( grp_fu_134_p1 );

    SC_METHOD(thread_grp_fu_154_p4);
    sensitive << ( grp_fu_134_p2 );

    SC_METHOD(thread_p_Val2_10_fu_277_p2);
    sensitive << ( grp_fu_154_p4 );
    sensitive << ( p_Val2_7_fu_272_p2 );

    SC_METHOD(thread_p_Val2_12_fu_230_p0);
    sensitive << ( InitN );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_p_Val2_12_fu_230_p3);
    sensitive << ( prev_yi_V );
    sensitive << ( p_Val2_12_fu_230_p0 );

    SC_METHOD(thread_p_Val2_15_fu_324_p3);
    sensitive << ( coeff_5_V );
    sensitive << ( tmp_2_fu_320_p2 );
    sensitive << ( yi_V_fu_314_p3 );

    SC_METHOD(thread_p_Val2_6_fu_246_p0);
    sensitive << ( InitN );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_p_Val2_6_fu_246_p3);
    sensitive << ( prev_x1_V );
    sensitive << ( p_Val2_6_fu_246_p0 );

    SC_METHOD(thread_p_Val2_7_fu_272_p2);
    sensitive << ( p_Val2_5_reg_397 );
    sensitive << ( p_Val2_6_fu_246_p3 );

    SC_METHOD(thread_p_Val2_9_fu_238_p0);
    sensitive << ( InitN );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_p_Val2_9_fu_238_p3);
    sensitive << ( prev_x2_V );
    sensitive << ( p_Val2_9_fu_238_p0 );

    SC_METHOD(thread_pid_addsub2_V_1_fu_341_p2);
    sensitive << ( p_Val2_15_fu_324_p3 );
    sensitive << ( tmp1_fu_336_p2 );

    SC_METHOD(thread_pid_addsub2_V_fu_288_p2);
    sensitive << ( tmp_fu_283_p2 );
    sensitive << ( p_Val2_9_fu_238_p3 );

    SC_METHOD(thread_pid_addsub_V_fu_164_p2);
    sensitive << ( din_0_V );
    sensitive << ( din_1_V );

    SC_METHOD(thread_prev_yd_V_load_s_fu_254_p0);
    sensitive << ( InitN );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_prev_yd_V_load_s_fu_254_p3);
    sensitive << ( prev_yd_V );
    sensitive << ( prev_yd_V_load_s_fu_254_p0 );

    SC_METHOD(thread_tmp1_fu_336_p2);
    sensitive << ( grp_fu_154_p4 );
    sensitive << ( p_Val2_10_reg_409 );

    SC_METHOD(thread_tmp_1_fu_310_p2);
    sensitive << ( coeff_4_V );
    sensitive << ( ap_ce );
    sensitive << ( pid_addsub2_V_reg_414 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_tmp_2_fu_320_p2);
    sensitive << ( coeff_5_V );
    sensitive << ( ap_ce );
    sensitive << ( pid_addsub2_V_reg_414 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_tmp_4_fu_347_p2);
    sensitive << ( coeff_4_V );
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( pid_addsub2_V_1_fu_341_p2 );

    SC_METHOD(thread_tmp_6_fu_170_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( coeff_4_V );
    sensitive << ( ap_ce );
    sensitive << ( pid_addsub_V_fu_164_p2 );

    SC_METHOD(thread_tmp_7_fu_184_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( coeff_5_V );
    sensitive << ( ap_ce );
    sensitive << ( pid_addsub_V_fu_164_p2 );

    SC_METHOD(thread_tmp_9_fu_359_p2);
    sensitive << ( coeff_5_V );
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( pid_addsub2_V_1_fu_341_p2 );

    SC_METHOD(thread_tmp_V_fu_352_p3);
    sensitive << ( coeff_4_V );
    sensitive << ( pid_addsub2_V_1_fu_341_p2 );
    sensitive << ( tmp_4_fu_347_p2 );

    SC_METHOD(thread_tmp_fu_283_p2);
    sensitive << ( pid_mult2_V_reg_403 );
    sensitive << ( p_Val2_12_fu_230_p3 );

    SC_METHOD(thread_yi_V_fu_314_p3);
    sensitive << ( coeff_4_V );
    sensitive << ( pid_addsub2_V_reg_414 );
    sensitive << ( tmp_1_fu_310_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_ce );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    prev_yi_V = "0000000000000000000000000";
    prev_x2_V = "0000000000000000000000000";
    prev_x1_V = "0000000000000000000000000";
    prev_yd_V = "0000000000000000000000000";
    dout_1_V_preg = "0000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "PID_Controller_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, InitN, "(port)InitN");
    sc_trace(mVcdFile, coeff_0_V, "(port)coeff_0_V");
    sc_trace(mVcdFile, coeff_1_V, "(port)coeff_1_V");
    sc_trace(mVcdFile, coeff_2_V, "(port)coeff_2_V");
    sc_trace(mVcdFile, coeff_3_V, "(port)coeff_3_V");
    sc_trace(mVcdFile, coeff_4_V, "(port)coeff_4_V");
    sc_trace(mVcdFile, coeff_5_V, "(port)coeff_5_V");
    sc_trace(mVcdFile, din_0_V, "(port)din_0_V");
    sc_trace(mVcdFile, din_1_V, "(port)din_1_V");
    sc_trace(mVcdFile, dout_0_V, "(port)dout_0_V");
    sc_trace(mVcdFile, dout_1_V, "(port)dout_1_V");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_21, "ap_sig_bdd_21");
    sc_trace(mVcdFile, prev_yi_V, "prev_yi_V");
    sc_trace(mVcdFile, prev_x2_V, "prev_x2_V");
    sc_trace(mVcdFile, prev_x1_V, "prev_x1_V");
    sc_trace(mVcdFile, prev_yd_V, "prev_yd_V");
    sc_trace(mVcdFile, OP2_V_fu_204_p1, "OP2_V_fu_204_p1");
    sc_trace(mVcdFile, OP2_V_reg_392, "OP2_V_reg_392");
    sc_trace(mVcdFile, grp_fu_154_p4, "grp_fu_154_p4");
    sc_trace(mVcdFile, p_Val2_5_reg_397, "p_Val2_5_reg_397");
    sc_trace(mVcdFile, pid_mult2_V_reg_403, "pid_mult2_V_reg_403");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_65, "ap_sig_bdd_65");
    sc_trace(mVcdFile, p_Val2_10_fu_277_p2, "p_Val2_10_fu_277_p2");
    sc_trace(mVcdFile, p_Val2_10_reg_409, "p_Val2_10_reg_409");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_75, "ap_sig_bdd_75");
    sc_trace(mVcdFile, pid_addsub2_V_fu_288_p2, "pid_addsub2_V_fu_288_p2");
    sc_trace(mVcdFile, pid_addsub2_V_reg_414, "pid_addsub2_V_reg_414");
    sc_trace(mVcdFile, tmp_V_fu_352_p3, "tmp_V_fu_352_p3");
    sc_trace(mVcdFile, tmp_V_reg_421, "tmp_V_reg_421");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_87, "ap_sig_bdd_87");
    sc_trace(mVcdFile, tmp_9_fu_359_p2, "tmp_9_fu_359_p2");
    sc_trace(mVcdFile, tmp_9_reg_426, "tmp_9_reg_426");
    sc_trace(mVcdFile, p_Val2_15_fu_324_p3, "p_Val2_15_fu_324_p3");
    sc_trace(mVcdFile, e_V_1_fu_190_p3, "e_V_1_fu_190_p3");
    sc_trace(mVcdFile, dout_1_V_preg, "dout_1_V_preg");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_bdd_116, "ap_sig_bdd_116");
    sc_trace(mVcdFile, grp_fu_134_p0, "grp_fu_134_p0");
    sc_trace(mVcdFile, OP2_V_1_fu_267_p1, "OP2_V_1_fu_267_p1");
    sc_trace(mVcdFile, grp_fu_134_p1, "grp_fu_134_p1");
    sc_trace(mVcdFile, OP1_V_fu_199_p1, "OP1_V_fu_199_p1");
    sc_trace(mVcdFile, OP1_V_1_fu_209_p1, "OP1_V_1_fu_209_p1");
    sc_trace(mVcdFile, OP1_V_2_fu_262_p1, "OP1_V_2_fu_262_p1");
    sc_trace(mVcdFile, OP1_V_3_fu_331_p1, "OP1_V_3_fu_331_p1");
    sc_trace(mVcdFile, grp_fu_134_p2, "grp_fu_134_p2");
    sc_trace(mVcdFile, pid_addsub_V_fu_164_p2, "pid_addsub_V_fu_164_p2");
    sc_trace(mVcdFile, tmp_6_fu_170_p2, "tmp_6_fu_170_p2");
    sc_trace(mVcdFile, tmp_7_fu_184_p2, "tmp_7_fu_184_p2");
    sc_trace(mVcdFile, e_V_fu_176_p3, "e_V_fu_176_p3");
    sc_trace(mVcdFile, p_Val2_12_fu_230_p0, "p_Val2_12_fu_230_p0");
    sc_trace(mVcdFile, p_Val2_9_fu_238_p0, "p_Val2_9_fu_238_p0");
    sc_trace(mVcdFile, p_Val2_6_fu_246_p0, "p_Val2_6_fu_246_p0");
    sc_trace(mVcdFile, prev_yd_V_load_s_fu_254_p0, "prev_yd_V_load_s_fu_254_p0");
    sc_trace(mVcdFile, prev_yd_V_load_s_fu_254_p3, "prev_yd_V_load_s_fu_254_p3");
    sc_trace(mVcdFile, p_Val2_6_fu_246_p3, "p_Val2_6_fu_246_p3");
    sc_trace(mVcdFile, p_Val2_7_fu_272_p2, "p_Val2_7_fu_272_p2");
    sc_trace(mVcdFile, p_Val2_12_fu_230_p3, "p_Val2_12_fu_230_p3");
    sc_trace(mVcdFile, tmp_fu_283_p2, "tmp_fu_283_p2");
    sc_trace(mVcdFile, p_Val2_9_fu_238_p3, "p_Val2_9_fu_238_p3");
    sc_trace(mVcdFile, tmp_1_fu_310_p2, "tmp_1_fu_310_p2");
    sc_trace(mVcdFile, tmp_2_fu_320_p2, "tmp_2_fu_320_p2");
    sc_trace(mVcdFile, yi_V_fu_314_p3, "yi_V_fu_314_p3");
    sc_trace(mVcdFile, tmp1_fu_336_p2, "tmp1_fu_336_p2");
    sc_trace(mVcdFile, pid_addsub2_V_1_fu_341_p2, "pid_addsub2_V_1_fu_341_p2");
    sc_trace(mVcdFile, tmp_4_fu_347_p2, "tmp_4_fu_347_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("PID_Controller.hdltvin.dat");
    mHdltvoutHandle.open("PID_Controller.hdltvout.dat");
}

PID_Controller::~PID_Controller() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void PID_Controller::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
            ap_CS_fsm = ap_NS_fsm.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dout_1_V_preg = ap_const_lv25_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
             !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            dout_1_V_preg = e_V_1_fu_190_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        OP2_V_reg_392 = OP2_V_fu_204_p1.read();
        p_Val2_5_reg_397 = grp_fu_134_p2.read().range(39, 15);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()))) {
        p_Val2_10_reg_409 = p_Val2_10_fu_277_p2.read();
        pid_addsub2_V_reg_414 = pid_addsub2_V_fu_288_p2.read();
        prev_x1_V = p_Val2_5_reg_397.read();
        prev_x2_V = pid_mult2_V_reg_403.read();
        prev_yd_V = p_Val2_10_fu_277_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()))) {
        pid_mult2_V_reg_403 = grp_fu_134_p2.read().range(39, 15);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()))) {
        prev_yi_V = p_Val2_15_fu_324_p3.read();
        tmp_9_reg_426 = tmp_9_fu_359_p2.read();
        tmp_V_reg_421 = tmp_V_fu_352_p3.read();
    }
}

void PID_Controller::thread_OP1_V_1_fu_209_p1() {
    OP1_V_1_fu_209_p1 = esl_sext<50,25>(coeff_0_V.read());
}

void PID_Controller::thread_OP1_V_2_fu_262_p1() {
    OP1_V_2_fu_262_p1 = esl_sext<50,25>(coeff_2_V.read());
}

void PID_Controller::thread_OP1_V_3_fu_331_p1() {
    OP1_V_3_fu_331_p1 = esl_sext<50,25>(coeff_3_V.read());
}

void PID_Controller::thread_OP1_V_fu_199_p1() {
    OP1_V_fu_199_p1 = esl_sext<50,25>(coeff_1_V.read());
}

void PID_Controller::thread_OP2_V_1_fu_267_p1() {
    OP2_V_1_fu_267_p1 = esl_sext<50,25>(prev_yd_V_load_s_fu_254_p3.read());
}

void PID_Controller::thread_OP2_V_fu_204_p1() {
    OP2_V_fu_204_p1 = esl_sext<50,25>(e_V_1_fu_190_p3.read());
}

void PID_Controller::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void PID_Controller::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void PID_Controller::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void PID_Controller::thread_ap_sig_bdd_116() {
    ap_sig_bdd_116 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void PID_Controller::thread_ap_sig_bdd_21() {
    ap_sig_bdd_21 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void PID_Controller::thread_ap_sig_bdd_65() {
    ap_sig_bdd_65 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void PID_Controller::thread_ap_sig_bdd_75() {
    ap_sig_bdd_75 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void PID_Controller::thread_ap_sig_bdd_87() {
    ap_sig_bdd_87 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void PID_Controller::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_21.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void PID_Controller::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_65.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void PID_Controller::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_75.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void PID_Controller::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_bdd_87.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void PID_Controller::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_bdd_116.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void PID_Controller::thread_dout_0_V() {
    dout_0_V = (!tmp_9_reg_426.read()[0].is_01())? sc_lv<25>(): ((tmp_9_reg_426.read()[0].to_bool())? coeff_5_V.read(): tmp_V_reg_421.read());
}

void PID_Controller::thread_dout_1_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dout_1_V = e_V_1_fu_190_p3.read();
    } else {
        dout_1_V = dout_1_V_preg.read();
    }
}

void PID_Controller::thread_e_V_1_fu_190_p3() {
    e_V_1_fu_190_p3 = (!tmp_7_fu_184_p2.read()[0].is_01())? sc_lv<25>(): ((tmp_7_fu_184_p2.read()[0].to_bool())? coeff_5_V.read(): e_V_fu_176_p3.read());
}

void PID_Controller::thread_e_V_fu_176_p3() {
    e_V_fu_176_p3 = (!tmp_6_fu_170_p2.read()[0].is_01())? sc_lv<25>(): ((tmp_6_fu_170_p2.read()[0].to_bool())? coeff_4_V.read(): pid_addsub_V_fu_164_p2.read());
}

void PID_Controller::thread_grp_fu_134_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        grp_fu_134_p0 =  (sc_lv<25>) (OP2_V_1_fu_267_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()))) {
        grp_fu_134_p0 =  (sc_lv<25>) (OP2_V_reg_392.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        grp_fu_134_p0 =  (sc_lv<25>) (OP2_V_fu_204_p1.read());
    } else {
        grp_fu_134_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void PID_Controller::thread_grp_fu_134_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        grp_fu_134_p1 =  (sc_lv<25>) (OP1_V_3_fu_331_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        grp_fu_134_p1 =  (sc_lv<25>) (OP1_V_2_fu_262_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        grp_fu_134_p1 =  (sc_lv<25>) (OP1_V_1_fu_209_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        grp_fu_134_p1 =  (sc_lv<25>) (OP1_V_fu_199_p1.read());
    } else {
        grp_fu_134_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void PID_Controller::thread_grp_fu_134_p2() {
    grp_fu_134_p2 = (!grp_fu_134_p0.read().is_01() || !grp_fu_134_p1.read().is_01())? sc_lv<50>(): sc_bigint<25>(grp_fu_134_p0.read()) * sc_bigint<25>(grp_fu_134_p1.read());
}

void PID_Controller::thread_grp_fu_154_p4() {
    grp_fu_154_p4 = grp_fu_134_p2.read().range(39, 15);
}

void PID_Controller::thread_p_Val2_10_fu_277_p2() {
    p_Val2_10_fu_277_p2 = (!p_Val2_7_fu_272_p2.read().is_01() || !grp_fu_154_p4.read().is_01())? sc_lv<25>(): (sc_biguint<25>(p_Val2_7_fu_272_p2.read()) - sc_biguint<25>(grp_fu_154_p4.read()));
}

void PID_Controller::thread_p_Val2_12_fu_230_p0() {
    p_Val2_12_fu_230_p0 =  (sc_lv<1>) (InitN.read());
}

void PID_Controller::thread_p_Val2_12_fu_230_p3() {
    p_Val2_12_fu_230_p3 = (!p_Val2_12_fu_230_p0.read()[0].is_01())? sc_lv<25>(): ((p_Val2_12_fu_230_p0.read()[0].to_bool())? prev_yi_V.read(): ap_const_lv25_0);
}

void PID_Controller::thread_p_Val2_15_fu_324_p3() {
    p_Val2_15_fu_324_p3 = (!tmp_2_fu_320_p2.read()[0].is_01())? sc_lv<25>(): ((tmp_2_fu_320_p2.read()[0].to_bool())? coeff_5_V.read(): yi_V_fu_314_p3.read());
}

void PID_Controller::thread_p_Val2_6_fu_246_p0() {
    p_Val2_6_fu_246_p0 =  (sc_lv<1>) (InitN.read());
}

void PID_Controller::thread_p_Val2_6_fu_246_p3() {
    p_Val2_6_fu_246_p3 = (!p_Val2_6_fu_246_p0.read()[0].is_01())? sc_lv<25>(): ((p_Val2_6_fu_246_p0.read()[0].to_bool())? prev_x1_V.read(): ap_const_lv25_0);
}

void PID_Controller::thread_p_Val2_7_fu_272_p2() {
    p_Val2_7_fu_272_p2 = (!p_Val2_5_reg_397.read().is_01() || !p_Val2_6_fu_246_p3.read().is_01())? sc_lv<25>(): (sc_biguint<25>(p_Val2_5_reg_397.read()) - sc_biguint<25>(p_Val2_6_fu_246_p3.read()));
}

void PID_Controller::thread_p_Val2_9_fu_238_p0() {
    p_Val2_9_fu_238_p0 =  (sc_lv<1>) (InitN.read());
}

void PID_Controller::thread_p_Val2_9_fu_238_p3() {
    p_Val2_9_fu_238_p3 = (!p_Val2_9_fu_238_p0.read()[0].is_01())? sc_lv<25>(): ((p_Val2_9_fu_238_p0.read()[0].to_bool())? prev_x2_V.read(): ap_const_lv25_0);
}

void PID_Controller::thread_pid_addsub2_V_1_fu_341_p2() {
    pid_addsub2_V_1_fu_341_p2 = (!tmp1_fu_336_p2.read().is_01() || !p_Val2_15_fu_324_p3.read().is_01())? sc_lv<25>(): (sc_biguint<25>(tmp1_fu_336_p2.read()) + sc_biguint<25>(p_Val2_15_fu_324_p3.read()));
}

void PID_Controller::thread_pid_addsub2_V_fu_288_p2() {
    pid_addsub2_V_fu_288_p2 = (!tmp_fu_283_p2.read().is_01() || !p_Val2_9_fu_238_p3.read().is_01())? sc_lv<25>(): (sc_biguint<25>(tmp_fu_283_p2.read()) + sc_biguint<25>(p_Val2_9_fu_238_p3.read()));
}

void PID_Controller::thread_pid_addsub_V_fu_164_p2() {
    pid_addsub_V_fu_164_p2 = (!din_0_V.read().is_01() || !din_1_V.read().is_01())? sc_lv<25>(): (sc_biguint<25>(din_0_V.read()) - sc_biguint<25>(din_1_V.read()));
}

void PID_Controller::thread_prev_yd_V_load_s_fu_254_p0() {
    prev_yd_V_load_s_fu_254_p0 =  (sc_lv<1>) (InitN.read());
}

void PID_Controller::thread_prev_yd_V_load_s_fu_254_p3() {
    prev_yd_V_load_s_fu_254_p3 = (!prev_yd_V_load_s_fu_254_p0.read()[0].is_01())? sc_lv<25>(): ((prev_yd_V_load_s_fu_254_p0.read()[0].to_bool())? prev_yd_V.read(): ap_const_lv25_0);
}

void PID_Controller::thread_tmp1_fu_336_p2() {
    tmp1_fu_336_p2 = (!p_Val2_10_reg_409.read().is_01() || !grp_fu_154_p4.read().is_01())? sc_lv<25>(): (sc_biguint<25>(p_Val2_10_reg_409.read()) + sc_biguint<25>(grp_fu_154_p4.read()));
}

void PID_Controller::thread_tmp_1_fu_310_p2() {
    tmp_1_fu_310_p2 = (!pid_addsub2_V_reg_414.read().is_01() || !coeff_4_V.read().is_01())? sc_lv<1>(): (sc_bigint<25>(pid_addsub2_V_reg_414.read()) > sc_bigint<25>(coeff_4_V.read()));
}

void PID_Controller::thread_tmp_2_fu_320_p2() {
    tmp_2_fu_320_p2 = (!pid_addsub2_V_reg_414.read().is_01() || !coeff_5_V.read().is_01())? sc_lv<1>(): (sc_bigint<25>(pid_addsub2_V_reg_414.read()) < sc_bigint<25>(coeff_5_V.read()));
}

void PID_Controller::thread_tmp_4_fu_347_p2() {
    tmp_4_fu_347_p2 = (!pid_addsub2_V_1_fu_341_p2.read().is_01() || !coeff_4_V.read().is_01())? sc_lv<1>(): (sc_bigint<25>(pid_addsub2_V_1_fu_341_p2.read()) > sc_bigint<25>(coeff_4_V.read()));
}

void PID_Controller::thread_tmp_6_fu_170_p2() {
    tmp_6_fu_170_p2 = (!pid_addsub_V_fu_164_p2.read().is_01() || !coeff_4_V.read().is_01())? sc_lv<1>(): (sc_bigint<25>(pid_addsub_V_fu_164_p2.read()) > sc_bigint<25>(coeff_4_V.read()));
}

void PID_Controller::thread_tmp_7_fu_184_p2() {
    tmp_7_fu_184_p2 = (!pid_addsub_V_fu_164_p2.read().is_01() || !coeff_5_V.read().is_01())? sc_lv<1>(): (sc_bigint<25>(pid_addsub_V_fu_164_p2.read()) < sc_bigint<25>(coeff_5_V.read()));
}

void PID_Controller::thread_tmp_9_fu_359_p2() {
    tmp_9_fu_359_p2 = (!pid_addsub2_V_1_fu_341_p2.read().is_01() || !coeff_5_V.read().is_01())? sc_lv<1>(): (sc_bigint<25>(pid_addsub2_V_1_fu_341_p2.read()) < sc_bigint<25>(coeff_5_V.read()));
}

void PID_Controller::thread_tmp_V_fu_352_p3() {
    tmp_V_fu_352_p3 = (!tmp_4_fu_347_p2.read()[0].is_01())? sc_lv<25>(): ((tmp_4_fu_347_p2.read()[0].to_bool())? coeff_4_V.read(): pid_addsub2_V_1_fu_341_p2.read());
}

void PID_Controller::thread_tmp_fu_283_p2() {
    tmp_fu_283_p2 = (!pid_mult2_V_reg_403.read().is_01() || !p_Val2_12_fu_230_p3.read().is_01())? sc_lv<25>(): (sc_biguint<25>(pid_mult2_V_reg_403.read()) + sc_biguint<25>(p_Val2_12_fu_230_p3.read()));
}

void PID_Controller::thread_yi_V_fu_314_p3() {
    yi_V_fu_314_p3 = (!tmp_1_fu_310_p2.read()[0].is_01())? sc_lv<25>(): ((tmp_1_fu_310_p2.read()[0].to_bool())? coeff_4_V.read(): pid_addsub2_V_reg_414.read());
}

void PID_Controller::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

void PID_Controller::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"InitN\" :  \"" << InitN.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coeff_0_V\" :  \"" << coeff_0_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coeff_1_V\" :  \"" << coeff_1_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coeff_2_V\" :  \"" << coeff_2_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coeff_3_V\" :  \"" << coeff_3_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coeff_4_V\" :  \"" << coeff_4_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coeff_5_V\" :  \"" << coeff_5_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"din_0_V\" :  \"" << din_0_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"din_1_V\" :  \"" << din_1_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_0_V\" :  \"" << dout_0_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_1_V\" :  \"" << dout_1_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_ce\" :  \"" << ap_ce.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

